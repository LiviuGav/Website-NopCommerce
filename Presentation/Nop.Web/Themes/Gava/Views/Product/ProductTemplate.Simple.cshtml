@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Html

@inject IHtmlFormatter htmlFormatter
@inject IWebHelper webHelper
@inject SeoSettings seoSettings

<style>
    .apasat h1
    {
        color: #ff4c3b;
    }
    .hidden {
        display: none;
    }

    .content {
        margin-top: 30px;
    }
</style>



@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                <script type="application/ld+json">
                    @Html.Raw(Model.JsonLd)
                </script>
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="gallery">
                        <!--product pictures-->
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        <!--product videos-->
                        @await Html.PartialAsync("_ProductDetailsVideos", Model)

                    </div>
                    <div class="overview">
                        <div class="product-count">
                            <ul>
                                <li>
                                    <img src="~/icons/icons_0/fire.gif" class="img-fluid" alt="image">
                                    <span class="p-counter">37</span>
                                    <span class="lang">orders in last 24 hours</span>
                                </li>
                                <li>
                                    <img src="~/icons/icons_0/person.gif" class="img-fluid user_img" alt="image">
                                    <span class="p-counter">44</span>
                                    <span class="lang">active view this</span>
                                </li>
                            </ul>
                        </div>
                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1>
                                @Model.Name
                            </h1>
                        </div>
                        @* @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        } *@
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <div class="label-section">
                            <span class="badge badge-grey-color">#1 Best seller</span>
                            <span class="label-text">in fashion</span>
                        </div>
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--price & add to cart & estimate shipping-->
                        @{

                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceTop, additionalData = Model })
                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceBottom, additionalData = Model })

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                           
                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            <!--wishlist-->
                            <div class="overview-buttons">
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                @{
                                    var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                    dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                }
                                @await Html.PartialAsync("_CompareProductsButton", Model)
                                @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                            </div>

                            
                            <div class="product-count">
                                <ul>
                                    <li>
                                        <img src="~/icons/icons_0/truck.png" class="img-fluid" alt="image">
                                        <span class="lang">Free shipping for orders above $500 USD</span>
                                    </li>
                                </ul>
                            </div>
                            <div class="border-product" id="b1">
                                <h6 class="product-title">Sales Ends In</h6>
                                <div class="timer">
                                    <p id="demo">
                                    <div class="days-counter">
                                        <div class="zile">
                                            <span id="days">0</span>
                                            <span class="padding-l">:</span>
                                        </div>
                                        <div class="days"><span class="timer-cal">Days</span></div>
                                    </div>
                                    <div class="hours-counter">
                                            <div class="ore">
                                                <span id="hours">0</span>
                                                <span class="padding-l">:</span>
                                            </div>
                                            <div class="hours"><span class="timer-cal">Hrs</span></div>
                                    </div>
                                    <div class="minutes-counter">
                                            <div class="minute">
                                                <span id="minutes">0</span>
                                                <span class="padding-l">:</span>
                                            </div>
                                            <div class="minutes"><span class="timer-cal">Min</span></div>
                                    </div>
                                    <div class="seconds-counter">
                                            <div class="secunde">
                                                <span id="seconds">0</span>
                                               
                                            </div>
                                            <div class="seconds"><span class="timer-cal">Sec</span></div>
                                    </div>
                                    </p>
                                </div>
                            </div>
                            <div class="border-product" id="b2">
                                <h6 class="product-title">shipping info</h6>
                                <ul class="shipping-info">
                                    <li>100% Original Products</li>
                                    <li>Free Delivery on order above Rs. 799</li>
                                    <li>Pay on delivery is available</li>
                                    <li>Easy 30 days returns and exchanges</li>
                                </ul>
                            </div>

                        }
                        <div class="share">
                        <h6 class="title">Share it</h6>
                        <!--compare, email a friend-->
                        @await Html.PartialAsync("_ShareButton", Model)
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                        </div>
                        <div class="border-product" id="b3">
                            <h6 class="product-title">100% secure payment</h6>
                            <img src="~/icons/icons_0/payment.png" class="img-fluid mt-1" alt="">
                        </div>
                    </div>

                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                <div class="meniu-produs">
                    <a class="titlu apasat" id="detalii" onclick="showDiv('div1','detalii')"> <h1>DETAILS</h1> </a>
                    <a class="titlu" id="specificatii" onclick="showDiv('div2','specificatii')"> <h1>SPECIFICATIONS</h1> </a>
                    <a class="titlu" id="videoclip" onclick="showDiv('div3','videoclip')"> <h1>VIDEO</h1> </a>
                    <a class="titlu" id="scrie-rev" onclick="showDiv('div4','scrie-rev')"> <h1>REVIEWS</h1> </a>
                </div>
                <div id="div1" class="content">
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                </div>
                <div id="div2" class="content hidden">
                    @if (!string.IsNullOrEmpty(Model.ShortDescription))
                    {
                        <div class="short-description">
                            @Html.Raw(Model.ShortDescription)
                        </div>
                    }
                </div>
                <div id="div3" class="content hidden">
                    <iframe width="560" height="315" src="https://www.youtube.com/embed/BUWzX78Ye_8" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>
                </div>
                <div id="div4" class="content hidden">
                    <!--product reviews-->
                    @if (Model.ProductReviewOverview.AllowCustomerReviews)
                    {
                        @await Html.PartialAsync("_ProductReviews", Model.ProductReviews)
                    }
                </div>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })
                @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
            </div>
        </form>
        
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>

<script>
    function showDiv(divId,nume) {
        // Ascunde toate div-urile
        var allDivs = document.querySelectorAll('.content');
        allDivs.forEach(function (div) {
            div.classList.add('hidden');
        });

        // Ascunde toate div-urile
        var allDivs = document.querySelectorAll('.titlu');
        allDivs.forEach(function (div) {
            div.classList.remove('apasat');
        });

        // Arată div-ul selectat
        var selectedDiv = document.getElementById(divId);
        selectedDiv.classList.remove('hidden');

        // Arată div-ul selectat
        var selectedDiv = document.getElementById(nume);
        selectedDiv.classList.add('apasat');

    }

    // Curăță localStorage pentru a elimina timer-ul vechi
    localStorage.removeItem('countDownDate');

    // Verifică dacă există un timp de sfârșit salvat în localStorage
    var savedEndTime = localStorage.getItem('countDownDate');

    // Dacă nu există un timp salvat, setează timer-ul la 40 de ore de la momentul curent
    if (!savedEndTime) {
        var countDownDate = new Date().getTime() + (40 * 60 * 60 * 1000);
        localStorage.setItem('countDownDate', countDownDate); // Salvează noul timp de sfârșit în localStorage
    } else {
        var countDownDate = parseInt(savedEndTime, 10);
    }

    // Actualizează timer-ul în fiecare secundă
    var x = setInterval(function () {

        // Obține data și ora curentă
        var now = new Date().getTime();

        // Calculează diferența de timp între data curentă și timpul limită
        var distance = countDownDate - now;

        // Calculează zilele, orele, minutele și secundele rămase
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Ajustează zilele și orele pentru a afișa timpul dorit
        if (hours > 0) {
            days += 1; // Adaugă o zi suplimentară
        }

        // Afișează rezultatele în elementele cu id-urile respective
        document.getElementById("days").textContent = days;
        document.getElementById("hours").textContent = hours; // Afișează orele rămase
        document.getElementById("minutes").textContent = minutes;
        document.getElementById("seconds").textContent = seconds;

        // Dacă timer-ul a expirat, afișează un mesaj și resetează localStorage
        if (distance < 0) {
            clearInterval(x);
            document.getElementById("demo").textContent = "EXPIRED";
            localStorage.removeItem('countDownDate'); // Resetează timer-ul pentru următoarea deschidere
        }
    }, 1000);



</script>